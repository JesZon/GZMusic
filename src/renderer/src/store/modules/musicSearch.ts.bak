// 音乐搜索状态管理模块
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { searchMusic } from '@renderer/api/MusicSearch'
import type { MusicSearchItem, ApiResponse } from '@renderer/api/MusicSearch'

// 搜索状态枚举
export enum SearchStatus {
  IDLE = 'idle', // 空闲状态
  LOADING = 'loading', // 加载中状态
  SUCCESS = 'success', // 成功状态
  ERROR = 'error' // 错误状态
}

// 搜索历史记录类型
export interface SearchHistory {
  keyword: string
  timestamp: number
}

// 缓存数据类型
export interface SearchCache {
  keyword: string
  data: MusicSearchItem[]
  timestamp: number
  expireTime: number
}

export const useMusicSearchStore = defineStore('musicSearch', () => {
  // ===== State =====
  // 搜索结果列表
  const searchResults = ref<MusicSearchItem[]>([])
  
  // 当前搜索关键词
  const currentKeyword = ref<string>('')
  
  // 搜索状态
  const searchStatus = ref<SearchStatus>(SearchStatus.IDLE)
  
  // 错误信息
  const errorMessage = ref<string>('')
  
  // 热门搜索关键词
  const hotKeywords = ref<string[]>([])
  
  // 搜索建议
  const searchSuggestions = ref<string[]>([])
  
  // 搜索历史记录（最多保存20条）
  const searchHistory = ref<SearchHistory[]>([])
  
  // 搜索结果缓存（最多缓存10个搜索结果，每个缓存30分钟）
  const searchCache = ref<Map<string, SearchCache>>(new Map())
  
  // 是否显示搜索建议
  const showSuggestions = ref<boolean>(false)
  
  // 当前选中的音乐项
  const selectedMusic = ref<MusicSearchItem | null>(null)

  // ===== Getters =====
  // 是否正在加载
  const isLoading = computed(() => searchStatus.value === SearchStatus.LOADING)
  
  // 是否有搜索结果
  const hasResults = computed(() => searchResults.value.length > 0)
  
  // 是否有错误
  const hasError = computed(() => searchStatus.value === SearchStatus.ERROR)
  
  // 格式化的搜索结果（添加索引和格式化艺术家）
  const formattedResults = computed(() => {
    return searchResults.value.map((item, index) => ({
      ...item,
      index: index + 1,
      artistsText: item.artists.join(' / '),
      sourcesText: item.sources.join(' / '),
      duration: formatDuration(item.release_time)
    }))
  })
  
  // 最近搜索历史（最多显示10条）
  const recentSearchHistory = computed(() => {
    return searchHistory.value
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, 10)
      .map(item => item.keyword)
  })
  
  // 搜索统计信息
  const searchStats = computed(() => ({
    totalResults: searchResults.value.length,
    currentKeyword: currentKeyword.value,
    searchTime: new Date().toLocaleTimeString(),
    cacheSize: searchCache.value.size
  }))

  // ===== Actions =====
  // 执行音乐搜索
  const performSearch = async (keyword: string, useCache: boolean = true) => {
    if (!keyword.trim()) {
      errorMessage.value = '搜索关键词不能为空'
      searchStatus.value = SearchStatus.ERROR
      return
    }

    const trimmedKeyword = keyword.trim()
    currentKeyword.value = trimmedKeyword
    
    // 检查缓存
    if (useCache && searchCache.value.has(trimmedKeyword)) {
      const cached = searchCache.value.get(trimmedKeyword)!
      if (Date.now() < cached.expireTime) {
        searchResults.value = cached.data
        searchStatus.value = SearchStatus.SUCCESS
        addToHistory(trimmedKeyword)
        return
      } else {
        // 缓存过期，删除
        searchCache.value.delete(trimmedKeyword)
      }
    }

    try {
      searchStatus.value = SearchStatus.LOADING
      errorMessage.value = ''
      
      const response: ApiResponse<MusicSearchItem[]> = await searchMusic(trimmedKeyword)
      
      if (response.code === 200 || response.code === 0) {
        searchResults.value = response.data || []
        searchStatus.value = SearchStatus.SUCCESS
        
        // 添加到搜索历史
        addToHistory(trimmedKeyword)
        
        // 添加到缓存
        addToCache(trimmedKeyword, response.data || [])
      } else {
        throw new Error(response.message || '搜索失败')
      }
    } catch (error) {
      searchStatus.value = SearchStatus.ERROR
      errorMessage.value = error instanceof Error ? error.message : '搜索请求失败'
      searchResults.value = []
    }
  }
  
  // 清空搜索结果
  const clearSearchResults = () => {
    searchResults.value = []
    currentKeyword.value = ''
    searchStatus.value = SearchStatus.IDLE
    errorMessage.value = ''
    selectedMusic.value = null
  }
  
  // 选择音乐项
  const selectMusic = (music: MusicSearchItem) => {
    selectedMusic.value = music
  }
  
  // 添加到搜索历史
  const addToHistory = (keyword: string) => {
    const existingIndex = searchHistory.value.findIndex(item => item.keyword === keyword)
    
    if (existingIndex !== -1) {
      // 更新时间戳
      searchHistory.value[existingIndex].timestamp = Date.now()
    } else {
      // 添加新记录
      searchHistory.value.push({
        keyword,
        timestamp: Date.now()
      })
      
      // 保持最多20条记录
      if (searchHistory.value.length > 20) {
        searchHistory.value = searchHistory.value
          .sort((a, b) => b.timestamp - a.timestamp)
          .slice(0, 20)
      }
    }
    
    // 持久化到localStorage
    saveHistoryToStorage()
  }
  
  // 删除搜索历史记录
  const removeFromHistory = (keyword: string) => {
    searchHistory.value = searchHistory.value.filter(item => item.keyword !== keyword)
    saveHistoryToStorage()
  }
  
  // 清空搜索历史
  const clearSearchHistory = () => {
    searchHistory.value = []
    localStorage.removeItem('musicSearchHistory')
  }
  
  // 添加到缓存
  const addToCache = (keyword: string, data: MusicSearchItem[]) => {
    const cacheItem: SearchCache = {
      keyword,
      data,
      timestamp: Date.now(),
      expireTime: Date.now() + 30 * 60 * 1000 // 30分钟后过期
    }
    
    searchCache.value.set(keyword, cacheItem)
    
    // 保持最多10个缓存
    if (searchCache.value.size > 10) {
      const oldestKey = Array.from(searchCache.value.entries())
        .sort((a, b) => a[1].timestamp - b[1].timestamp)[0][0]
      searchCache.value.delete(oldestKey)
    }
  }
  
  // 清空缓存
  const clearCache = () => {
    searchCache.value.clear()
  }
  
  // 隐藏搜索建议
  const hideSuggestions = () => {
    showSuggestions.value = false
  }
  
  // 保存搜索历史到localStorage
  const saveHistoryToStorage = () => {
    try {
      localStorage.setItem('musicSearchHistory', JSON.stringify(searchHistory.value))
    } catch (error) {
      console.warn('保存搜索历史失败:', error)
    }
  }
  
  // 从localStorage加载搜索历史
  const loadHistoryFromStorage = () => {
    try {
      const stored = localStorage.getItem('musicSearchHistory')
      if (stored) {
        const parsed = JSON.parse(stored) as SearchHistory[]
        // 过滤掉过期的历史记录（超过30天）
        const thirtyDaysAgo = Date.now() - 30 * 24 * 60 * 60 * 1000
        searchHistory.value = parsed.filter(item => item.timestamp > thirtyDaysAgo)
      }
    } catch (error) {
      console.warn('加载搜索历史失败:', error)
      searchHistory.value = []
    }
  }
  
  // 初始化store
  const initStore = () => {
    loadHistoryFromStorage()
  }

  // ===== 工具函数 =====
  // 格式化时长
  const formatDuration = (releaseTime: string): string => {
    // 这里可以根据实际需要格式化发布时间
    return releaseTime || '未知'
  }

  return {
    // State
    searchResults,
    currentKeyword,
    searchStatus,
    errorMessage,
    hotKeywords,
    searchSuggestions,
    searchHistory,
    showSuggestions,
    selectedMusic,
    
    // Getters
    isLoading,
    hasResults,
    hasError,
    formattedResults,
    recentSearchHistory,
    searchStats,
    
    // Actions
    performSearch,
    clearSearchResults,
    selectMusic,
    addToHistory,
    removeFromHistory,
    clearSearchHistory,
    clearCache,
    hideSuggestions,
    initStore
  }
})

// 导出类型
export type MusicSearchStore = ReturnType<typeof useMusicSearchStore>